--
-- Elevate Labs Data Analyst Internship - Task 4: SQL for Data Analysis
--
-- Database: task_3 (Custom Movie Rental Dataset)
-- Author: [VEERA SAI PAVAN CHAVVAKULA]
--
-- This script includes all DDL (CREATE TABLE/VIEW) and DML (INSERT/SELECT) queries
--

-- 1. SWITCH TO THE CORRECT DATABASE
USE task_3;

-- 2. SCHEMA DEFINITION (DDL - Data Definition Language)

-- films Table Creation (Note: Primary Key is films_id, as implemented)
CREATE TABLE films (
    films_id INT PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    release_year INT,
    rental_rate DECIMAL(4, 2)
);

-- customers Table Creation
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(255),
    is_active BOOLEAN
);

-- rentals Table Creation (Transactional table with Foreign Keys)
-- Note: The return_date column is added in a separate ALTER command below,
-- as it was necessary to fix the INSERT statement in the console.
CREATE TABLE rentals (
    rental_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    films_id INT, -- Matches primary key in films table
    rental_date DATE,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (films_id) REFERENCES films(films_id)
);

-- Adding the missing return_date column to the rentals table
ALTER TABLE rentals
ADD COLUMN return_date DATE;


-- 3. DATA POPULATION (DML - Data Manipulation Language)

-- Insert data into films
INSERT INTO films (films_id, title, release_year, rental_rate) VALUES
(101, 'the matrix ', 1999, 4.99),
(102, 'Inception', 2010, 5.99),
(103, 'PulpFiction' , 1994, 3.99),
(104, 'Parasite', 2019, 4.99),
(105, 'Amelie', 2001, 2.99);

-- Insert data into customers
INSERT INTO customers (customer_id, first_name, last_name, email, is_active) VALUES
(1, 'Alice', 'Smith', 'alice@example.com', TRUE),
(2, 'Bob', 'Johnson', 'bob@example.com', TRUE),
(3, 'Charlie', 'Brown', 'charlie@example.com', FALSE),
(4, 'Diana', 'Prince', 'diana@example.com', TRUE);

-- Insert data into rentals
INSERT INTO rentals (customer_id, films_id, rental_date, return_date) VALUES
(1, 101, '2025-09-01', '2025-09-03'),
(2, 102, '2025-09-01', '2025-09-04'),
(1, 103, '2025-09-05', '2025-09-06'),
(4, 101, '2025-09-06', '2025-09-08'),
(2, 104, '2025-09-07', NULL);


-- 4. ANALYTICAL QUERIES

-- a. Basic Selection and Filtering (SELECT, WHERE, ORDER BY)
-- Find all films released after 2005, ordered by release year.
SELECT
    title,
    release_year,
    rental_rate
FROM
    films
WHERE
    release_year > 2005
ORDER BY
    release_year ASC;

-- b. Joins and Aggregation (INNER JOIN, SUM, GROUP BY)
-- Calculate the total revenue generated by each film.
SELECT
    f.title AS film_title,
    SUM(f.rental_rate) AS total_revenue
FROM
    rentals r
INNER JOIN
    films f ON r.films_id = f.films_id -- Use films_id for join
GROUP BY
    f.title
ORDER BY
    total_revenue DESC;

-- c. Filtering Aggregated Data (HAVING)
-- Find customers who have made more than one rental.
SELECT
    c.first_name,
    c.last_name,
    COUNT(r.rental_id) AS total_rentals
FROM
    customers c
INNER JOIN
    rentals r ON c.customer_id = r.customer_id
GROUP BY
    c.customer_id, c.first_name, c.last_name
HAVING
    total_rentals > 1;

-- d. Subquery and Average Calculation (AVG)
-- Find all films with a rental rate higher than the average rental rate of all films.
SELECT
    title,
    rental_rate
FROM
    films
WHERE
    rental_rate > (SELECT AVG(rental_rate) FROM films);

-- e. Calculate Average Revenue Per User (ARPU)
SELECT
    SUM(f.rental_rate) / COUNT(DISTINCT r.customer_id) AS Avg_user_revenue
FROM
    rentals r
INNER JOIN
    films f ON r.films_id = f.films_id;


-- 5. CREATE VIEW FOR ANALYSIS (frequently used reporting query)

CREATE VIEW rental_report_view AS
SELECT
    r.rental_id,
    c.first_name,
    c.last_name,
    f.title AS film_title,
    f.rental_rate,
    r.rental_date
FROM
    rentals r
INNER JOIN
    customers c ON r.customer_id = c.customer_id
INNER JOIN
    films f ON r.films_id = f.films_id
ORDER BY
    r.rental_date DESC;

-- Example query using the new view
SELECT *
FROM rental_report_view
WHERE rental_rate >= 4.99;


-- 6. QUERY OPTIMIZATION

-- Optimize the customers table by creating an index on last_name,
-- a column frequently used for searching or joining.
CREATE INDEX idx_customer_lastname
ON customers (last_name);
